PHOTOS
======


GET /photos
-----------
params:
	- type = bool (!!!!! should be type="popular")
	- date = Y-m-d
		- interval = int (default 1, num of earlier days to include)
	- frame = string 
		- filter = string (or vice versa)
	- ids = csv ints

	- offset = int (default 0)
	- limit = int (default 30)
  	- detailed = bool (default 0)
  	- includeComments = bool (default 0, requires detailed=1)
  	- numComments = int (default  2, required detailed=1, includeComments=1)
  	- includeLikers = bool (default 0, required detailed=1)
  	- numLikers = int (default  1, required detailed=1, includeLikers=1)
  	- includePeople = bool (default 0, required detailed=1)
    - numPeople = int (default 10, required detailed=1, includePeople=1)
    - includeAlbums = bool (default 0, required detailed=1)
    - userDetails = bool (default 0, required detailed=1)	

notes:
	- if frames and/or filter param is set, forwards to experimental.searchPhotosByFrameFilter
	- if date is set, forwards to experimental.searchPhotosByDate

todos:
	- introduce fields/params
	- eventually move to "collections endpoint"
	- better pagination!
	- introduce types (popular(?),date,ids, frame/filter)
	- standardize param defaults

GET /photos/popular
-------------------
params:
	- offset = int (default 0)
	- limit = int (default 30)
  	- detailed = bool (default 0)
  	- includeComments = bool (default 0, requires detailed=1)
  	- numComments = int (default  2, required detailed=1, includeComments=1)
  	- includeLikers = bool (default 0, required detailed=1)
  	- numLikers = int (default  1, required detailed=1, includeLikers=1)
  	- includePeople = bool (default 0, required detailed=1)
    - numPeople = int (default 10, required detailed=1, includePeople=1)
    - includeAlbums = bool (default 0, required detailed=1)
    - userDetails = bool (default 0, required detailed=1)	

todos:
	- introduce fields/params
	- eventually move to "collections endpoint"
	- better pagination!
	- standardize param defaults


POST /photos/upload
-------------------
pre-upload a binary photo to speed up upload process

params:
	- photo = file (in request body)

notes:
	- requires authed user



DELETE /photos/upload/{filename}
--------------------------------
params: 
	- filename = string (filename to be deleted)

notes:
	- requires authed user



POST /photos
POST /users/{user_id}/photos
----------------------------
params:
	- filename = string (if photo uploaded via POST /photos/upload)
	- photo = file (if no filename, in request body)
	- description = string (with album ids encoded)
	- albumIds = csv ids (for city, venue, country)
	- filter = string
	- frame = string
	- pimped = boolean
	- cropped = boolean
	- instagram_id = string (for IG 2 EyeEm importer tool)
	- topic = id (album id)
	- noLocation = bool (default 0)
	- venueId = string
		- venueServiceName = string (foursquare, eyeem)
	- latitude = float
	- longitude = float
	- city = string (city name)
	- cc = string (country name)
	- people = csv of person object ("service":"serviceId","service":"serviceId","service":"serviceId")
	- timestamp = timestamp (created At date, optional)


notes:
	- requires authed user
	- Api version 2.0.0 and above
	- topic parameter deprecated in 2.0.0 (?)


todos: 
	- remove duplicate (/users/{user_id}/photos)


GET /photos/{photo_id}/taggedPeople
PUT /photos/{photo_id}/taggedPeople
DELETE /photos/{photo_id}/taggedPeople
--------------------------------------
notes:
	- deprecated, forwards to photos.people
	- remove from codebase



GET /photos/{photo_id}/people
-----------------------------
params:
	- offset = int (default 0)
	- limit = int (default 30)

todos:
	- better pagination
	- better logic for the "person" object in v3 (can't keep making fb/tw ids public)



PUT /photos/{photo_id}/people
-----------------------------
params:
	- person = key:value ("eyeem":"eyeem_id","facebook":"fb_id","twitter":"tw_id")

notes:
	- requires authed user (either person in photo, or photo owner)



DELETE /photos/{photo_id}/people
--------------------------------
params:
	- person = key:value ("eyeem":"eyeem_id","facebook":"fb_id","twitter":"tw_id")
	- offense = string (reason for removing photo "other", "spam", "don't like")

notes:
	- requires authed user (either person in photo, or photo owner)



GET /photos/{photo_id}/person/{person_id}
PUT /photos/{photo_id}/person/{person_id}
DELETE /photos/{photo_id}/person/{person_id}
--------------------------------------------

todo:
	- implement
	- rename /photos/{id}/PEOPLE/{person_id}


GET /photos/{id}
----------------
params:
	- detailed = bool (default 1)
	- includeLikers = 1/0 (default 1, requires detailed=1)
	- numLikers = int (default 1, requires detailed=1, includeLikers=1)
	- includePeople = 1/0 (default 1, requires detailed=1)
	- numPeople = int (default 10 requires detailed=1, includePeople=1)
	- includeComments = 1/0 (default 1, requires detailed=1)
	- numComments = int (default 1, requires detailed=1, includeComments=2)
	- includeAlbums = 1/0 (default 1, requires detailed=1)
	- userDetails = 1/0 (default 0, requires detailed=1)

todos:
	- introduce fields/filters
	- standardize param defaults


PATCH /photos/{id}
POST /photos/{id}
PUT /photos/{id}
------------------
params:
	- description = string (containing encoded topics)
	- people *** api implementation could be broken here!
	- deleteAlbumIds = csv ids (to remove venue, city, country)
	- hide = bool (if 0 > unhide photo, if 1 hide photo from popular)

notes:
	- PUT is deprecated, POST is there as fallback for PATCH
	- Api Version 2.0.0 (description, etc)

todos:
	- in code, need to fix the people param: see /photos/{id}/people (PUT)


DELETE /photos/{id}
-------------------
notes:
	- requires authed user (photo owner or admin)


POST /photos/{photo_id}/likers
POST /users/{user_id}/likedPhotos
---------------------------------
params:
	- user_id
	- photo_id
	- album_id

todos:
	- duplicate endpoint, remove either here or in user + /photos/{id}/likers/{liker_id}




GET /photos/{photo_id}/likers/{liker_id}
PUT /photos/{photo_id}/likers/{liker_id}
DELETE /photos/{photo_id}/likers/{liker_id}
-------------------------------------------
GET checks if liker_id has liked a photo
PUT likes the photo
DELETE unlikes the photo

params:
	- album_id = int (album id the user was browsing when they added the comment)

todos:
	- duplicate calls with same effect (?)



GET /photos/{id}/comments
-------------------------
params:
	- onlyId = bool
	- offset = int (default 0)
	- limit = int (default 30)

todos:
	- better pagination
	- move onlyId to separate endpoint



POST /photos/{id}/comments
--------------------------
adds a comment if user isn't blocked. max comment length = 800 chars

params:
	- comment = string (could also be message)
	- album_id = int (album the user was browsing when they added the comment)

notes:
	- requires authed (and not restricted) user

todos: 
	- stop param transition in v3



GET /photos/{photo_id}/comments/{comment_id}
--------------------------------------------
returns comment


PATCH /photos/{photo_id}/comments/{comment_id}
POST /photos/{photo_id}/comments/{comment_id}
PUT /photos/{photo_id}/comments/{comment_id}
----------------------------------------------
updates comment (if photo owner, comment author). max comment length = 800 chars

params:
	- comment = string (could also be message)

notes:
	- requires authed user

todos: 
	- stop param transition in v3


DELETE /photos/{photo_id}/comments/{comment_id}
-----------------------------------------------
deletes comment (if photo owner, comment author)

notes:
	- requires authed user



POST /photos/{id}/share
-----------------------
params:
	- upload = bool (default 0)
	- services = csv string (facebook, twitter, tumblr, foursquare, flickr)
	- message = string

notes:
	- requires authed user

POST /photos/{id}/discover
--------------------------
todos:
	- no longer posting discover to facebook. remove.


GET /photos/{id}/albums
-----------------------
params:
	- onlyId = bool
	- offset = int (default 0)
	- limit = int (default 30)
	- detailed = bool (default 0)
	- includePhotos = bool (default 0, requires detailed=1)
	- includeLikers = bool (default 0, requires detailed=1)
	- includeContributors = bool (default 0, requires detailed=1)	

todos:
	- introduce fields/filters
	- better pagination
	- standard defaults(!)
	- onlyId moved to separate endpoint


PUT /photos/mnemonic
--------------------
params:
	- 'id' = photo id to be rated
	- 'result','rating' = string (rejected, approved)

notes:
	- only for App Id 291 (mnemonic)
	- params are in body (json)


POST /photos/{id}/flag
----------------------
params:
	- offense = string (nudity, copyright, terms)

notes:
	- requires authed user



POST /photos/{id}/topics
------------------------
params:
	- topics = csv strings

notes:
	- requires authed user
	- deprecated


GET /photos/bgImages
--------------------

notes:
	- deprecated (very old clients), remove from codebase