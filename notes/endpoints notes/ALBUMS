ALBUMS
======

GET /albums
POST / albums
-------------
params:
	- detailed = 1/0 (default 1)
	- includePhotos = 1/0 (default 1)
    - numPhotos = int (default 10)
    - includeContributors = 1/0 (Default 0)
    - includeLikers = 1/0 (Default 0)
    - offset = int (Default 0)
    - limit = int (Default 30)
    - q = string
    	- minPhotos = int (Default 1)
    	- type = string (tag | city | country | venue)
    - top = 1
  	- geoSearch = city | nearbyVenues | foursquareVenue	
  		- lat = latitude (float)
  		- lng = longitude (float)
  		- foursquareId = string (required if geoSearch = foursquareVenue)
    - trending = 1
    - ids = CSV album ids

 
todos:
 	- post is non-existent, remove from codebase.
 	- introduce fields
 	- introduce filters
 	- introduce before/after or better pagination 	
 	- introduce types
 		- 'trending'	
 		- 'ids', requires values= CSV album ids
 		- 'search' requires values = search string
 		- 'top' (forwards to experimental.topAlbums)
 		- 'venueCategory' (forwards to experimental.albumVenuesByCategory)

POST /albums/{id}/hide
----------------------
notes:
	- authenticated user required
	- admins only

GET /albums/recommended
-----------------------
params:
	- detailed = 1/0 (default 1)
	- includePhotos = 1/0 (default 1)
    - numPhotos = int (default 10)
    - includeContributors = 1/0 (Default 0)
    - includeLikers = 1/0 (Default 0)
    - offset = int (Default 0)
    - limit = int (Default 30)

 todos:
 	- move to /albums w/ type "recommended"
 	- still in use by clients?

POST /albums
------------
params:
notes:
	- requires authenticated user

todos:
 	- still in use by clients?
 	- "basic" album type no longer exists



GET /albums/{album_id}
PUT /albums/{album_id}
DELETE /albums/{album_id}
-------------------------
params:
	- detailed = 1/0 (default 1)
	- includePhotos = 1/0 (default 0)
    - numPhotos = int (default 10)
    - includeContributors = 1/0 (Default 0)
    - numContributors = int (default 30)
    - includeLikers = 1/0 (Default 0)
	- numLikers = int (default 30)
	- photoDetails = 1/0 (default 0)
	- photoLikers = 1/0 (default 1, requires photoDetails=1)
	- photoNumLikers = int (default 1, requires photoDetails=1, photoLikers=1)
	- photoPeople = 1/0 (default 1, requires photoDetails=1)
	- photoNumPeople = int (default 1, requires photoDetails=1, photoPeople=1)
	- photoComments = 1/0 (default 1, requires photoDetails=1)
	- photoNumComments = int (default 1, requires photoDetails=1, photoPeople=2)
	- photoAlbums = 1/0 (default 1, requires photoDetails=1)
	- userDetails = 1/0 (default 0, requires photoDetails=1)

todos:
 	- introduce fields
 	- introduce filters
 	- introduce before/after or better pagination
 	- likers or favoriters?
	- PUT & DELETE are non-existent, remove from codebase.

POST /albums/{album_id}/invites
-------------------------------
params:
	- user_id = array of invited user ids
	- fb_request_id = facebook request id (deprecated)
	- fb_user_id = array of facebook user ids (deprecated)

notes:
	- requires authenticated user

todos:
	- remove deprecated

POST /albums/{album_id}/acceptInvites
-------------------------------------
params:
	- fb_request_id (optional)

notes:
	- requires authenticated user

GET /albums/{id}/favoriters
POST /albums/{id}/favoriters
----------------------------
notes:
	- forwards to /albums/{id}/likers

todo:
	- remove in v3 and keep only favoriters

GET /albums/{id}/favoriters
---------------------------
params:
	- onlyId = 1/0 (default 0)
	- detailed = 1/0 (default 0)

todos:
	- onlyId should be replaced by a separate endpoint. ex /albums/{id}/favoriterIds

POST /albums/{id}/favoriters
POST /albums/{id}/likers 
----------------------------
params:
	- user_id = id of user favoriting the album

notes:
	- internal function name (forward): addLiker
	- requires authenticated user
	- also forwarded from POST /users/{user_id}/likedAlbums

todos:
	- user_id param is unnecessary since this endpoints requires an authenticated user
	- deprecate /likers > one endpoint per FX


GET /albums/{album_id}/favoriters/{user_id}
GET /albums/{album_id}/likers/{user_id}
-------------------------------------------

todos:
	- deprecate /albums/{album_id}/likers/{user_id} > one endpoint per FX

PUT /albums/{album_id}/favoriters/{user_id}
PUT /albums/{album_id}/likers/{user_id}
-------------------------------------------

notes:
	-requires authenticated user

todos:
	- deprecate /albums/{album_id}/likers/{user_id} > one endpoint per FX



DELETE /albums/{album_id}/favoriters/{user_id}
DELETE /albums/{album_id}/likers/{user_id}
----------------------------------------------

notes:
	-requires authenticated user
	
todos:
	- deprecate /albums/{album_id}/likers/{user_id} > one endpoint per FX



GET /albums/{id}/contributors/{user_id}
---------------------------------------
params:
	- user_id = user id

GET /albums/{id}/contributors
-----------------------------
params:
	- offset = int (default 0)
	- limit = int (default 30)
	- detailed = 1/0 (default 0)
	- onlyId 1/0 (default 0)

todo:
	- improved pagination
	- introduce fields
	- separate endpoint for onlyId (/contributorIds)

GET /albums/{id}/activities
GET /albums/{id}/comments
---------------------------
todo:
	- not implemented, not needed. remove.

POST /albums/{id}/discover
--------------------------
todo:
	- no longer posting discover actions to fb. remove.

POST /albums/{id}/view
----------------------
adds one view to an album

GET /albums/{id}/photos
-----------------------
params:
    - offset = int (Default 0)
    - limit = int (Default 30)
    - after = photo id
    - before = photo id
    - order = desc | asc (default: desc)
	- onlyId = 1/0 (default 0)	
	- filter = nearby
  		- lat = latitude (float)
  		- lng = longitude (float)
	- sort = top (default/empty = chronological)
	- detailed = 1/0 (default 0)
	- includeLikers = 1/0 (default 0, requires detailed=1)
	- numLikers = int (default 1, requires detailed=1, photoLikers=1)
	- includePeople = 1/0 (default 0, requires detailed=1)
	- numPeople = int (default 4, requires detailed=1, photoPeople=1)
	- includeComments = 1/0 (default 0, requires detailed=1)
	- numComments = int (default 2, requires detailed=1, photoPeople=2)
	- includeAlbums = 1/0 (default 0, requires detailed=1)
	- userDetails = 1/0 (default 0, requires detailed=1)

todos:
	- separate endpoint for onlyId (photoIds)
	- onlyId is disabled, remove or reactivate	
	- introduce fields
	- remove duplicate pagination (use only before/after?)
	- merge "order" w/ "sort" params?


POST /albums/{id}/photos
------------------------
params:
	- photo_id = photo id (required)

notes:
	- requires authenticated user
todo:
	- remove either this or its equivalent in /photos
	- should be completely removed and replaced by PUT (better format for this request?)

GET /albums/{album_id/photos/{photo_id}
---------------------------------------
simple boolean relationship check

PUT /albums/{album_id/photos/{photo_id}
DELETE /albums/{album_id/photos/{photo_id}
------------------------------------------
notes:
	- requires authenticated user
todo:
	- eventually also make this available to admins

GET /collections/{radius}
-------------------------
todo:
	- looks like this is not used: remove!
	- move to a separate "collections" document and eventually module (in code base)

GET /collections
----------------
params:
	- type = nearbyLive
    - offset = int (Default 0)
    - limit = int (Default 30)	
  	- lat = latitude (float)
  	- lng = longitude (float)
	- detailed = 1/0 (default 0)
	- includeLikers = 1/0 (default 0, requires detailed=1)
	- numLikers = int (default 1, requires detailed=1, photoLikers=1)
	- includeComments = 1/0 (default 0, requires detailed=1)
	- numComments = int (default 2, requires detailed=1, photoPeople=2)
	- includeAlbums = 1/0 (default 0, requires detailed=1)

todos:
	- more types (radius, popular, etc) > migrate from elsewhere
	- introduce fields
	- better pagination


POST /albums/{id}/share
-----------------------
params:
	- services = comma-separated (facebook, twitter, tumblr)
	- message = string

GET /albums/{id}/mute
---------------------
check if user has muted album from their personal discover

notes: 
	- requires authenticated use

POST /albums/{id}/mute
----------------------
mute an album from the personalized discover of the authed user

notes: 
	- requires authenticated use

DELETE /albums/{id}/mute
------------------------
unmute an album from the personalized discover of the authed user

notes: 
	- requires authenticated use

GET /albums/{album_id}/relatedAlbums
------------------------------------
params:
	- venueCategory/venueCategoryId = foursquare categoryId to filter albums by
    - offset = int (Default 0)
    - limit = int (Default 30)	
    - type = string (album type, default none)

notes:
	- forwards to experimental.RelatedAlbums

todos:
	- promote to /albums (away from experimental)
	- introduce filters
	- better pagination

GET /albums/{id}/weather
------------------------
params:
	- date = Y-m-d (defaults to today)

notes:
	- requires a city/venue album

GET /albums/{id}/venueCategories
--------------------------------
returns the types of venues the photos of a certain album are in (ordered by frequency)
notes:
	- requires a city/country/tag album (no venue)
	- forwards to experimental.albumVenueCategories